name: EcoDetect CI/CD

on: 
  push:
    branches: [ main ]
  pull_request: 
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
    steps:
    - uses: actions/checkout@v3
      # Backend Tests
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run Backend Tests
      run: |
        python -m pytest --cov=. --cov-report=xml
    
    # Frontend Tests
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'  
    - name: Install dependencies
      run: | 
        cd sensor-frontend
        npm install
    - name: Run Frontend Tests
      run: |
        cd sensor-frontend
        npm test -- --coverage

    # Upload coverage
    - name: Upload coverage reports
      uses: codecov/codecov-action@v2
      with:
        directory: ./
        fail_ci_if_error: false
  
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v2

    # Build frontend
    - name: Set Up Node.js
      uses: actions/setup-node@v2
      with:
        python-version: '16'

    - name: Install Frontend Dependencies
      run: |
        cd sensor-frontend
        npm run build
    - name: Create PWA manifest and service worker
      run: |
        cd sensor-frontend
        # Create manifest.json for PWA
        echo '{
        "short_name": "EcoDetect",
        "name": "EcoDetect Environmental Monitoring",
        "icons": [
          {
            "src": "favicon.ico"
            "sizes": "64x64",
            "type": "image/x-icon"
          },
          {
            "src": "logo192.png"
            "type": "image/png",
            "sizes": "192x192"
          },
          {
            "src": "logo512.png"
            "type": "image/png",
            "type": "512x512"
          }  
        ],
        "start_url": ".",
        "display": "standalone",
        "theme_color": "#388E3C",
        "background_color": "#F1F8E9"
        }' > manifest.json  

    - name: Package backend
      run: |
          zip -r ..backend.zip ./*
    
    - name: Package frontend
      run: |
          cd sensor-frontend
          zip -r ../sensor-frontend.zip build/*
    
    - name: Upload backend artifact
      uses: actions/upload-artifact@v2
      with:
        name: backend
        path: backend.zip

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v2
      with:
        name: sensor-frontend
        path: sensor-frontend.zip
  
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with: 
        name: backend-code
        path: ./

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ./sensor-frontend/build

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1 

    - name: Deploy to AWS EC2 
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEV_HOST }}
        username: ${{ secrets.DEV_USERNAME }}
        key: ${{ secrets.DEV_SSH_KEY }}
        source: "./"
        target: "/var/www/ecodetect"     

    - name: Restart Services
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEV_HOST }}
        username: ${{ secrets.DEV_USERNAME }}
        key: ${{ secrets.DEV_SSH_KEY }}
        script: |
          cd /var/www/ecodetect
          sudo systemctl restart ecodetect-backend
          sudo systemctl restart nginx
    
    
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with: 
        name: backend-code
        path: ./backend

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ./
  
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
  
    - name: Deploy to EC2 Production
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        source: "./backend"
        target: "/var/www/ecodetect"
  
    - name: Restart Services
      uses: appleboy/ssh-action@master
      with: 
        host: ${{ secrets.PROD_HOST}}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /var/www/ecodetect
          sudo systemctl restart ecodetect-backend
          sudo systemctl restart nginx
        