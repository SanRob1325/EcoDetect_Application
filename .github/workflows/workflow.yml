name: EcoDetect CI/CD

on: 
  push:
    branches: [ main ]
  pull_request: 
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      CI: "true"
      ROOT_CA_PATH2: /tmp/dummy-ca.pem
      PRIVATE_KEY_PATH2: /tmp/dummy-key.pem
      CERTIFICATE_PATH2: /tmp/dummy-cert.pem
      AWS_REGION: eu-west-1
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
      SES_EMAIL_SENDER: dummy@example.com
      SES_EMAIL_RECIPIENT: recipient@example.com
      SNS_TOPIC_ARN: dummy-arn
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
    steps:
    - uses: actions/checkout@v4
      # Backend Tests
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    - name: Create dummy cert files for MQTT
      run: |
        echo "dummy" > $ROOT_CA_PATH2
        echo "dummy" > $PRIVATE_KEY_PATH2
        echo "dummy" > $CERTIFICATE_PATH2
    
    - name: Run Backend Tests
      run: python -m pytest --cov=. --cov-report=xml
    
    # Frontend Tests
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'  
    - name: Install dependencies
      run: | 
        cd ./sensor-frontend
        npm install
    - name: Run Frontend Tests
      run: |
        cd ./sensor-frontend
        npm test -- --coverage

    # Upload coverage
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: ./
        fail_ci_if_error: false
  
  build-and-deploy:
    name: Build and Deploy Backend
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Package backend
      run: |
          mkdir -p deploy
          cp backend.py backend_mobile.py alert_service.py reports.py auth_middleware.py validation_utlis.py deploy/
        
          # Copy requirements file
          cp requirements.txt deploy/

          echo "EcoDetect Backend Deployment" > deploy/DEPLOY_README.md

          cd deploy 
          zip -r ../backend_deployment.zip .

    - name: Deploy to EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
      run: |
        # Prepare SSH
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

        # Copy deployment package 
        scp -i ~/.ssh/deploy_key backend_deployment.zip $EC2_USER@$EC2_HOST:~/ecodetect_backend.zip

        # Deploying to remote server
        ssh -i ~/.ssh/deploy_key $EC2_USER@$EC2_HOST << 'DEPLOY_SCRIPT'

          # Installing required packages
          sudo apt-get update
          sudo apt-get install -y unzip python3-venv

          # Creates a backup
          TIMESTAMP=$(date +"%Y%m_%H%M%S")
          mkdir -p ~/ecodetect_backups
          
          if [ -d ~/ecodetect ]; then
            cp -r ~/ecodetect ~/ecodetect_backups/backup_$TIMESTAMP
          fi

          # Removes existing deployment
          rm -rf ~/ecodetect 
          mkdir -p ~/ecodetect

          # Unzip new deployment
          unzip ~/ecodetect_backend.zip -d ~/ecodetect

          # Setup Python virtual environment
          python3 -m venv ~/ecodetect/venv
          source ~/ecodetect/venv/bin/activate

          # Install dependencies
          pip install --upgrade pip
          pip install -r ~/ecodetect/requirements.txt

          if [ ! -f /etc/systemd/system/ecodetect-backend.service ]; then
            echo "Creating systemd service file"
            
            SERVICE_CONTENT="[Unit]
          Description=EcoDetect Backend Service
          After=network.target

          [Service]
          User=$USER
          WorkingDirectory=/home/$USER/ecodetect
          ExecStart=/home/$USER/ecodetect/venv/bin/python /home/$USER/ecodetect/backend_mobile.py
          Restart=always
          Environment="PYTHONPATH=/home/$USER/ecodetect"
    
          [Install]
          WantedBy=multi-user.target"

            echo "$SERVICE_CONTENT" | sudo tee /etc/systemd/system/ecodetect-backend.service > /dev/null          
            sudo systemctl daemon-reload
            sudo systemctl enable ecodetect-backend
          fi 

          # Restarts service
          sudo systemctl restart ecodetect-backend

          # Checking service status
          sudo systemctl status ecodetect-backend --no-pager

          # Cleanup deployment zip
          rm ~/ecodetect_backend.zip

          # Remove old backups, keep the last 5 for in case of future errors
          cd ~/ecodetect_backups
          ls -t | tail -n +6 | xargs rm -rf
        DEPLOY_SCRIPT
  
  validate-deployment:
    name: Validate Deployment
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
    - name: Health Check
      env:
        EC2_HOST: ${{ secrets.EC2_HOST}}
      run: |
        # Waits for the deployment
        sleep 30

        # Performs health check 
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$EC2_HOST:5000/api/health --connect-timeout 10)

        if [ $RESPONSE -eq 200 ]; then
          echo "Deployment successful, health check passed."
          exit 0
        else 
          echo "Health check failed. Response code: $RESPONSE "
          exit 1
        fi



          
      
        
    