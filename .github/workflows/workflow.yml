name: EcoDetect CI/CD

on: 
  push:
    branches: [ main, develop ]
  pull_request: 
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test-backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest-flask pytest-cov
    
    - name: Run Tests
      run: | 
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install dependencies
      run: | 
        cd sensor-frontend
        npm ci
        npm test -- --coverage
  
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    
    - name: Lint Python Code
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    
    - name: Install ESLint
      run: |
        cd sensor-frontend 
        npm install eslint
    
    - name: Lint JavaScript code
      run: |
        cd sensor-frontend
        npx eslint . --ext .js,.jsx
  
  build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with: 
        node-version: '16'
    
    - name: Build Frontend
      run: |
        cd sensor-frontend
        npm ci
        npm run build

    - name: Upload frontend build artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: sensor-frontend/build/

    - name: Upload backend code artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-code
        path: |
          *.py
          !*test*.py
          requirements.txt

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with: 
        name: backend-code
        path: ./

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ./sensor-frontend/build

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1 

    - name: Deploy to AWS EC2 
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEV_HOST }}
        username: ${{ secrets.DEV_USERNAME }}
        key: ${{ secrets.DEV_SSH_KEY }}
        source: "./"
        target: "/var/www/ecodetect"     

    - name: Restart Services
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEV_HOST }}
        username: ${{ secrets.DEV_USERNAME }}
        key: ${{ secrets.DEV_SSH_KEY }}
        script: |
          cd /var/www/ecodetect
          sudo systemctl restart ecodetect-backend
          sudo systemctl restart nginx

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with: 
        name: backend-code
        path: ./backend

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ./
  
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
  
    - name: Deploy to EC2 Production
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        source: "./backend"
        target: "/var/www/ecodetect"
  
    - name: Restart Services
      uses: appleboy/ssh-action@master
      with: 
        host: ${{ secrets.PROD_HOST}}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /var/www/ecodetect
          sudo systemctl restart ecodetect-backend
          sudo systemctl restart nginx
        